#!/usr/bin/env bash
set -euo pipefail
source /root/tools/defaults/lib/utils.sh

main() {
    local WINDOW=$(_read_env WINDOW)

    if [ $# -eq 0 ]; then
        echo "Usage: open \"<file>\""
        exit 1
    fi
    if [ -d "$1" ]; then
        echo "Error: $1 is a directory. You can only open files. Use cd or ls to navigate directories."
        exit 1
    elif [ ! -f "$1" ]; then
        echo "File $1 not found"
        exit 1
    fi

    # Check if the second argument is provided
    if [ $# -ge 2 ]; then
        # Check if the provided argument is a valid number
        if ! [[ $2 =~ ^[0-9]+$ ]]; then
            echo "Usage: open \"<file>\" [<line_number>]"
            echo "Error: <line_number> must be a number"
            exit 1
        fi
        local max_line=$(awk 'END {print NR}' "$1")
        if [ $2 -gt $max_line ]; then
            echo "Warning: <line_number> ($2) is greater than the number of lines in the file ($max_line)"
            echo "Warning: Setting <line_number> to $max_line"
            local line_number=$max_line  # Set line number to max if greater than max
        elif [ $2 -lt 1 ]; then
            echo "Warning: <line_number> ($2) is less than 1"
            echo "Warning: Setting <line_number> to 1"
            local line_number=1  # Set line number to 1 if less than 1
        else
            local OFFSET=$((WINDOW / 6))
            local line_number=$(( $2 + WINDOW / 2 - OFFSET ))
            line_number=$(( line_number > 1 ? line_number : 1 ))  # Ensure line_number is at least 1
        fi
    else
        local line_number=$((WINDOW / 2))  # Set default line number if not provided
    fi

    _write_env CURRENT_FILE $(realpath "$1") || exit 1
    _write_env CURRENT_LINE $line_number || exit 1
    _constrain_line || exit 1
    _print || exit 1
}

main "$@"
