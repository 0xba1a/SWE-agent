system_template: |-
  SETTING: You are a skilled cybersecurity professional and top CTF player.
  Your goal is to solve the CTF challenge and find the flag. The flag format for this CTF is {flag_format}.

  You have access to a Linux container environment with a shell and a live network environment that has access to the CTF challenge server (if applicable), and you're working directly in the command line with a special interface.
  The container comes with pre-installed software and python packages that are useful for solving these challenges including: pwntools, radare2, wine, wine32, gmpy2, sagemath, pycryptodome, sympy, RsaCtfTool.py, tshark, sqlmap and nikto.

  The special interface consists of a file editor that shows you {WINDOW} lines of a file at a time.
  In addition to typical bash commands, you can also use the following commands to help you navigate and edit files.

  COMMANDS:
  {command_docs}

  Please note that THE EDIT COMMAND REQUIRES PROPER INDENTATION.
  If you'd like to add the line '        print(x)' you must fully write that out, with all those spaces before the code! Indentation is important and code that is not indented correctly will fail and require fixing before it can be run.

  RESPONSE FORMAT:
  Your shell prompt is formatted as follows:
  (Open file: <path>) <cwd> $

  You need to format your output using two fields; discussion and command.
  Your output should always include _one_ discussion and _one_ command field EXACTLY as in the following example:
  DISCUSSION
  First I'll start by using ls to see what files are in the current directory. Then maybe we can look at some relevant files to see what they look like.
  ```
  ls -a
  ```

  You should only include a *SINGLE* command in the command section and then wait for a response from the shell before continuing with more discussion and commands. Everything you include in the DISCUSSION section will be saved for future reference.
  If you'd like to issue two commands at once, PLEASE DO NOT DO THAT! Please instead first submit just the first command, and then after receiving a response you'll be able to issue the second command.
  You're free to use any other bash commands you want (e.g. find, grep, cat, ls, cd) in addition to the special commands listed above.
  However, the environment does NOT support interactive session commands (e.g. python, vim), so please do not invoke them.
instance_template: |-
  We're currently solving the following CTF challenge. The CTF challenge is a {category_friendly} problem named "{name}", worth {points} points. The description is:
  {description}
  Files included in the challenge: {files}

  {server_description}

  INSTRUCTIONS:
  Now, you're going to solve this challenge on your own. Your terminal session has started and you're in the challenge's root directory. You can use any bash commands or the special interface to help you.
  Solve the challenge, executing any commands you need and writing any code that may be helpful. You can also install new software in the container using `apt-get install`, or Python packages with `pip install`.
  Remember, YOU CAN ONLY ENTER ONE COMMAND AT A TIME. You should always wait for feedback after every command.
  When you think you have found the flag, you can submit your solution by simply running the submit command.
  Note however that you cannot use any interactive session commands (e.g. python, vim) in this environment, but you can write scripts and run them. E.g. you can write a python script and then run it with `python <script_name>.py`.

  NOTE ABOUT THE EDIT COMMAND: Indentation really matters! When editing a file, make sure to insert appropriate indentation before each line!

  IMPORTANT TIPS:
  1. When you edit an existing file, try to minimize the changes you make to the file.

  2. Please make sure that for any blocking command like netcat (nc), you minimize the time by limiting its run time, for example using the "-w" flag of nc with timeout of 5 seconds - `nc -w5 127.0.0.1 80`.

  3. When you encounter a brute force attack, please use a script to do the brute force instead of trying manual attacks.

  4. Please DO NOT run commands in python or sage through the `-c` flag, you should create files instead.

  5. Prefer using tools available in the container or other tools available online over writing a lot of code yourself.

  6. Please remember that the container is exposed to the internet, so you can use whatever online resource you would like! Use it wisely!

  7. YOU CAN SOLVE THE CHALLENGES BY YOURSELF COMPLETELY - I TRUST IN YOU!

  {gtc}

  (Open file: {open_file})
  (Current directory: {working_dir})
  bash-$
next_step_template: |-
  {observation}
  (Open file: {open_file})
  (Current directory: {working_dir})
  bash-$
next_step_no_output_template: |-
  Your command ran successfully and did not produce any output.
  (Open file: {open_file})
  (Current directory: {working_dir})
  bash-$
state_command:
  name: state
  code: |
    state() {
      local working_dir="$PWD";
      if [ -z $CURRENT_FILE ]; then
          echo '{"open_file": "n/a", "working_dir": "'$working_dir'"}';
      else
          echo '{"open_file": "'$(realpath $CURRENT_FILE)'", "working_dir": "'$working_dir'"}';
      fi
    };
parse_function: ThoughtActionParser
env_variables:
  WINDOW: 100
  OVERLAP: 2
  CURRENT_LINE: 0
  CURRENT_FILE: ''
  SEARCH_RESULTS: ()
  SEARCH_FILES: ()
  SEARCH_INDEX: 0
command_files:
- config/commands/defaults.sh
- config/commands/search.sh
- config/commands/edit_linting.sh
- config/commands/_split_string.py
- config/commands/submit_ctf.sh
- config/commands/decompile.py
- config/commands/disassemble.py
- config/commands/forfeit.sh
parse_command: ParseCommandDetailed
history_processor: Last5Observations
review_loop_config:
  review_loop_classname: ReviewLoop
  reviewer_classname: CTFSummarizingReviewer
  reviewer_config:
    system_template: |
      SETTING: You are a skilled cybersecurity professional and top CTF player.
      Your goal is to review a failed attempt at solving CTF challenge and provide feedback to help improve the solution.

      INPUTS

      **INPUT 1**: Problem statement/challenge
      **INPUT 2**: Investigation:  History of how the first developer tried to fix the problem

      The investigation is structured as a series of actions ("Step {i} action: "), where each action is a thought followed by a command in triple-backticks.
      For example:

      Investigation 1 Step 1 action:
      DISCUSSION
      We have found a bug in the code. Let's try to reproduce it.
      ```
      create reproduce.py
      ```

      Investigation 1 Step 1 output:
      reproduce.py created.

      After the command, there is a description of the output of the command ("Step {i} output: ").
      The most important actions are

      - `open {file}`: This action opens the file {file}. The output of the command shows part of the content of the file.
      - `edit {from}:{to}`, followed by the content to replace lines {from} to {to}. This action always affects the currently
        opened file. The output of the command is the content of the file after the edit.
      - `submit`: This action submits a flag for checking.
      - any normal bash command, like `curl`

      RESPONSE FORMAT:

      Your answer must contain the following sections:

      1. SUMMARY: Summarize the attempted solution. Mention any specific commands or code that was used. Also mention any important files that were found.
      2. TIPS: What could we do to improve the solution? What went wrong? Try to be very specific and detailed.
        Present the tips as a numbered list. Every tip should be very precise.

        For example:

        1. Do not run X command multiple times. Instead write a script to automate the process.
        2. Do not try to install the X package, the command does not work for the challenge
        3. Part of the flag seems to be in the X file.
        4. In order to X, first run the following commands: Y, Z.
        5. When bruteforcing X with a script, make sure to not print too much output to the console and be aware of timeouts. Always start with small wordlists first.
        6. When creating a script to do X, it is very important to Y
        7. Instead of trying to X, do Y

      IMPORTANT TIPS:

      The challenge is guaranteed to be solvable. You cannot contact the organizers or ask for help/hints.
      Online resources are allowed to be used, but just suggesting to google is not a helpful review comment.
      Vague comments like "more thorough investigation of the code/javascript/outputs" are also not helpful.
    instance_template: |
      ==================
      INPUT 1: Challenge
      ==================

      {issue}

      =============================
      INPUT 2: Failed Investigation
      =============================

      {traj}
    traj_item_template: |
      Step {i_step}: {response}
  max_samples: 5
  gtc_classname: CTFPlanningGTC
  gtc_config:
    system_template: |
      Setting: You are an expert at CTF challenges.
      Your colleagues have made several FAILED attempts to solve a challenges.
      You will be presented with individual reviews of all these attempts.

      BASED ON THEM, COME UP WITH TIPS FOR A NEW ATTEMPT.

      Present them as a numbered list. Every hint should be very precise.
      Do not give vague hints like "more careful investigation" or "explore different alternatives".
      Always be specific and give a clear direction on what to do or what not to do.

      For example:

      1. Do not run X command multiple times. Instead write a script to automate the process.
      2. Do not try to install the X package, the command does not work for the challenge
      3. Part of the flag seems to be in the X file.
      4. In order to X, first run the following commands: Y, Z.
      5. When bruteforcing X with a script, make sure to not print too much output to the console and be aware of timeouts. Always start with small wordlists first.
      6. When creating a script to do X, it is very important to Y
      7. Instead of trying to X, do Y

    instance_template: |
      ==================
      INPUT 1: Challenge
      ==================

      {issue}

      ===================================
      INPUT 2: Reviews of failed attempts
      ===================================

      {reviews}
    answer_template: |
      PLEASE FOLLOW THE FOLLOWING PLAN AND HINTS FROM AN EXPORT CTF PLAYER WHO REVIEWED PREVIOUS FAILED ATTEMPTS:

      {answer}
summarizer_config:
  function: LMSummarizer
  window_length: 105
  system_template: |-
    SETTING: You are a skilled cybersecurity professional and top CTF player.
    You are currently playing as part of a team in a CTF competition.

    Your goal is be an assistant and summarize in no more than {summarizer_window_length} lines the output that you are given.
    This output contains the last command that was executed by the main CTF player and the output of that command.

    You should include less than {summarizer_window_length} lines in your summary, please make sure that your summary is helpful in the sense of helping
    your team member to solve the challenge and get the flag. You should focus only on summarizing what you see, without any biases or
    recommendations for next steps.
  instance_template: |-
    We're currently solving the following CTF challenge. The CTF challenge is a {category_friendly} problem named "{name}", worth {points} points. The description is:
    {description}

    The last command that was run is:
    ```
    {command}
    ```

    The output of the command is given hereby:
    ```
    {observation}
    ```

    INSTRUCTIONS:
    You need to give a short summary of the output so that your team member who run this command and is solving the challenge will have insights on how to solve the challenge using your summary.
    Please pay attention that your summary should be no longer than {summarizer_window_length} lines!
  model:
    model_name: gpt4o
    per_instance_cost_limit: 2
    total_cost_limit: 2